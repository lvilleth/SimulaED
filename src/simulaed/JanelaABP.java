package simulaed;

import estruturas.ABP;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Leonardo Villeth
 */
public class JanelaABP extends javax.swing.JDialog {

    ABP arvore;
    public static ArrayList<Circulo> circulos;
    
    ABPCirculo arv;
    
    ImageIcon linha_esq = new ImageIcon("linha_esq.png");    
    ImageIcon linha_dir = new ImageIcon("linha_dir.png");    
    ArrayList<JLabel> linhas;
    
    // posicao x e y inicial (raiz da arvore)
    int xi,yi;
    
    boolean cor = false;
    
    public JanelaABP(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        configBtns();
        
        super.setLocationRelativeTo(null);
        
        arvore = new ABP();
        circulos = new ArrayList<>();

        xi = canvas.getWidth()/2;        
        yi = 0;        
        
        arv = new ABPCirculo();
    }
    
    private void configBtns(){
        
        btnInserir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valor = Integer.parseInt(txtValor.getText());
                
                if(cor){
                    removeCor();
                    cor = false;
                }
                
                Circulo c = new Circulo();
                c.setValor(valor);                
                
                boolean ok = arv.insere(c);                
                
                if(!ok)
                    return;
                
                cor = true;
                
                canvas.add(c);
                circulos.add(c);                
                
                canvas.revalidate();
                canvas.repaint();
            }
        });
        
        
        btnBuscar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valor = Integer.parseInt(txtValor.getText());
                if(cor){
                    removeCor();
                    cor = false;
                }
                
                Circulo c = new Circulo();
                c.setValor(valor);
                if(arv.busca(c) != null){
                    cor = true;
                }
            }
        });
    }
    
    private void removeCor(){
        for (Circulo circulo : circulos) {
            if(circulo.getIcon() != Circulo.BORDA_PRETA){
                circulo.setIcon(Circulo.BORDA_PRETA);
            }
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnInserir = new javax.swing.JButton();
        txtValor = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        lblRetorna = new javax.swing.JLabel();
        btnIn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        canvas = new CanvasABP();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnInserir.setText("Inserir");

        jLabel1.setText("Valor:");

        btnBuscar.setText("Buscar");

        lblRetorna.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        lblRetorna.setText("---");

        btnIn.setText("In-ordem");

        jLabel3.setText("Caminhar");

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(lblRetorna)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnIn)))
                .addContainerGap(816, Short.MAX_VALUE))
            .addComponent(canvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInserir)
                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar))
                    .addComponent(lblRetorna))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnIn;
    private javax.swing.JButton btnInserir;
    private javax.swing.JPanel canvas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblRetorna;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables



/**
 *
 * @author Leonardo Villeth
 */
    public class ABPCirculo {
        public class No {
            private Circulo dado;
            private No esq;
            private No dir;
            private int nivel;
            private int index;

            public No(){
                esq = null;
                dir = null;            
            }

            public Circulo getDado() {
                return dado;
            }
            public void setDado(Circulo c) {
                this.dado = c;
            }

            public No getEsq() {
                return esq;
            }
            public void setEsq(No esq) {
                this.esq = esq;
            }

            public No getDir() {
                return dir;
            }

            public void setDir(No dir) {
                this.dir = dir;
            }

            public int getNivel(){
                return nivel;
            }

            public int getIndex(){
                return index;
            }
        }

        private No raiz;

        public ABPCirculo(){
            raiz = null;
        }

        /** Verifica se a árvore está vazia
         * @return  */
        public boolean vazia (){
            return (raiz == null);
        }

        private void atualizaNivel(No T, int nivel){
            if(T != null){
                T.nivel = nivel;
                atualizaNivel(T.getEsq(), nivel + 1);
                atualizaNivel(T.getDir(), nivel + 1);
            }
        }

        /**Buscar recursivamente a partir da raiz.
            Retorna o endereço se o elemento for
            encontrado, caso contrário retorna NULL*/
        private No busca(No T, Circulo valor) {
            if (T == null)
                return null;  // Arvore Vazia
            
            if(T.getDado().getValor() == valor.getValor()){
                T.getDado().setIcon(Circulo.BORDA_AMARELA);
                return T; 	// Elem. encontrado na raiz
            }

            if (valor.getValor() < T.getDado().getValor())
                return busca(T.getEsq(), valor);
            else
                return busca(T.getDir(), valor);
        }

        /**Buscar um elemento na ABP
                Retorna o endereço se o elemento for
                encontrado, caso contrário retorna NUL
         * @param valor     
         * @return */
        public No busca(Circulo valor) {          
            if (raiz != null) 
                return busca(raiz, valor);

            return null;
        }

        public int getAltura(){
            return altura(raiz);
        }

        private int altura(No T){
            if(T == null)
                return 0;
            else{
                return 1 + Math.max(altura(T.getEsq()), altura(T.getDir()));
            }
        }


        /**Exibe o conteúdo de uma árvore no formato in-ordem
            (preserva a ordenaç?o)*/
        private void exibe (No T){
            if (T != null) {
                exibe(T.getEsq());
                System.out.print(" " + T.getDado());
                exibe(T.getDir());
            }
        }

        public void exibe() {
            if (raiz == null)
                System.out.println("Arvore vazia");
            else
                exibe(raiz);
        }

        /**Insere um nó em uma árvore ABP
            Retorna 1 se a inserç?o for com sucesso.
            Caso contrário retorna
         * @param valor
         * @return */
        public boolean insere(Circulo valor){

            No novoNo = new No();
            novoNo.setDado(valor);
            novoNo.setEsq(null);
            novoNo.setDir(null);

            if (raiz == null){ // Arvore vazia
                raiz = novoNo;
                raiz.index = 1;
                valor.setLocation(xi, yi);
                valor.setIcon(Circulo.BORDA_VERDE);
                return true;
            }        

            if(busca(valor) != null){ // valor ja existe na arvore
                return false;
            }

            // Procura a posicao correta pra inserir o novo no
            No aux = raiz;
            No p = null;
            while (aux != null) {
                p = aux;
                if (valor.getValor() < aux.getDado().getValor())
                    aux = aux.getEsq();
                else
                    aux = aux.getDir();
            }

            if(p == null)
                return false;        

            int y = p.getDado().getLocation().y;        
            y+= canvas.getHeight()/6;        

            int x = 0;
            switch(p.getNivel() + 1){
                case 1:
                    x = canvas.getWidth()/3;                
                    break;
                case 2:
                    x = canvas.getWidth()/5;
                    break;
                case 3:
                    x = canvas.getWidth()/9;
                    break;    
                case 4:
                    x = canvas.getWidth()/17;
                    break;
            }        
            
            if(p.getNivel() == 4){
                JOptionPane.showMessageDialog(rootPane, "Altura maxima permitida: 5.");
                return false;
            }
            
            // Encontrou um nó folha para inserir
            if (valor.getValor() < p.getDado().getValor()){
                novoNo.index = p.getIndex()*2 - 1;
                p.setEsq(novoNo);
                x *= novoNo.index;            
                valor.setLocation(x, y);
            }else{
                novoNo.index = p.getIndex()*2;            
                p.setDir(novoNo);
                x *= novoNo.index;            
                valor.setLocation(x, y);
            }
            
            valor.setIcon(Circulo.BORDA_VERDE);
            p.getDado().addConexao(valor);
            
            atualizaNivel(raiz, 0);
            return true;
        }
    }    
}
